<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
  xmlns:context="http://www.springframework.org/schema/context"  
 xmlns:p="http://www.springframework.org/schema/p"  
 xmlns:mvc="http://www.springframework.org/schema/mvc"  
 xmlns:cache="http://www.springframework.org/schema/cache"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
 xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/cache  
      http://www.springframework.org/schema/cache/spring-cache-3.2.xsd ">
      <!--  default-autowire="byName" default-lazy-init="true" -->
  <!-- springMVC比较详细注解 -->
  
	
  <!-- 基本配置  -begin-->
  
      <!-- 自动注入 -->
      <context:annotation-config></context:annotation-config>
      <!-- 自动扫描包  组件扫描-->
      <context:component-scan base-package="com"></context:component-scan>
      
      <!-- 注释驱动 -->
     <mvc:annotation-driven/> 
      
      <!-- 配置不用DispatcherServlet 拦截的路径 -->
      <mvc:resources location="/res/" mapping="/res/**"/> 
      <!-- 默认分发处理器不会拦截静态资源 -->
     <!--  <mvc:default-servlet-handler/> -->
      
      
      <!-- 默认地址栏访问跳转到首页 -->
   <!--   <mvc:view-controller path="/" view-name="forward:/index"/>  -->
      <!-- 也可以利用<mvc:view-controller/>配置错误页面的跳转 -->
      
      
       <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
 
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
            </list>
        </property>
    </bean>
      
      
      
      <!-- 采用SpringMVC自带的JSON转换工具，支持@ResponseBody注解 -->
   <!--   <bean id="annotationMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
      	<property name="messageConverters">
      		<list>
      			解析JSON数据，将json转换成java对象,避免IE执行AJAX时,返回JSON出现下载文件
      			<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
      				<property name="supportedMediaTypes">
      					<list>
      						<value>text/html;charset=UTF-8</value>
      					</list>
      				</property>
      			</bean>
      				
      		</list>
      	</property>
      </bean>  -->
       
       

      
      
      <!-- 视图解析器 -->
 	   <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		 <property name="prefix" value="/"></property>
		 <property name="suffix" value=".jsp"></property>
		 
		  <property name="viewClass"  
            value="org.springframework.web.servlet.view.JstlView"></property>  
	  </bean> 
	  
    
	<!-- 基本配置  -end-->
	
	
	<!-- 配置Ehcache缓存 -->
	<!-- 启动缓存注解功能 -->
	<cache:annotation-driven cache-manager="cacheManager"/>
	
	<!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	<!-- <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"></bean>
			</set>
		</property>
	</bean> -->
	
	<!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->  
    <!-- Spring提供的基于的Ehcache实现的缓存管理器 --> 
  
    <bean id="ehCacheManagerFactoryBean" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache.xml"/>  
    </bean>  
	 <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactoryBean"></property>
	</bean>  
	
	
	
	
	<!-- 功能配置 -begin-->
		
		<!-- 配置springJDBC Template -->
		<!-- 引入项目配置文件  方法一-->
	 	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:dbconfig.properties</value>
				</list>
			</property>
		</bean>  -->
		<!-- 引入项目配置文件 方法二-->
	<!-- 	<context:property-placeholder location="classpath:dbconfig.properties"/>
		
		
		 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<property name="url" value="${url}"></property>
				<property name="driverClassName"  value="${driverClassName}"></property>
				<property name="username" value="${username}"></property>
				<property name="password" value="${password}"></property>
			</bean>
				jdbcTemplate
			<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
				<property name="dataSource" ref="dataSource">
					
				</property>
			</bean>  -->
		
		<!-- datasource 配置数据库 -->
			<!-- datasource -->
			<!--  destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.-->
			 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<property name="url" value="jdbc:mysql://192.10.2.105:3306/yunlucrm"></property>
				<property name="driverClassName"  value="com.mysql.jdbc.Driver"></property>
				<property name="username" value="root"></property>
				<property name="password" value="chebilin"></property>
			</bean>
				<!-- jdbcTemplate -->
			<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
				<property name="dataSource" ref="dataSource">
					
				</property>
			</bean> 
	
     
     
     
  
    
	     <!-- 文件上传配置 -->
	  <!--    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	     	<property name="defaultEncoding" value="UTF-8"></property> 默认编码
	     	<property name="maxUploadSize" value="10000000"></property> 上传文件大小
	     </bean> -->
	     
	     
	      <!-- 拦截器 -->
	      <!--
		<mvc:interceptors>
			 <mvc:interceptor> 
			 	拦截全部地址
				<mvc:mapping path="/**"/>  
				登录拦截类
				<bean id="loginInterceptor" class="com.sgcc.uds.fs.config.web.interceptor.LoginInterceptor">
				</bean>
			 </mvc:interceptor> 	
		</mvc:interceptors>
		-->
		
		<!-- 异常 -->
		<!--  
		  <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
	      <property name="exceptionMappings">  
	        <props>  
	        	登录失败异常类
	          <prop key="com.sgcc.uds.fs.config.web.interceptor.UnLoginException">redirect:/toLogin</prop>  
	        </props>  
	      </property>  
	    </bean>    
	    -->
	 
   <!-- 功能配置 -end-->
     
</beans>